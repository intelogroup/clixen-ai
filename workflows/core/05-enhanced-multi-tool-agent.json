{
  "name": "Enhanced Multi-Tool AI Agent",
  "nodes": [
    {
      "id": "webhook_trigger",
      "name": "Webhook Trigger",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1.1,
      "position": [
        250,
        400
      ],
      "parameters": {
        "path": "multi-tool-agent",
        "method": "POST",
        "responseMode": "responseNode"
      }
    },
    {
      "id": "extract_intent",
      "name": "Extract Intent",
      "type": "n8n-nodes-base.openAi",
      "typeVersion": 1,
      "position": [
        450,
        400
      ],
      "parameters": {
        "model": "gpt-4",
        "prompt": "Analyze this request and determine what tools are needed:\n\nRequest: {{ $json.query }}\n\nAvailable tools:\n- web_scraping: Extract data from websites\n- weather: Get weather information\n- search: Web search and research\n- data_analysis: Process and analyze data\n- content_generation: Create content\n\nRespond with JSON: {\"intent\": \"main_purpose\", \"tools_needed\": [\"tool1\", \"tool2\"], \"location\": \"if_needed\", \"url\": \"if_needed\"}",
        "temperature": 0.3,
        "maxTokens": 200
      }
    },
    {
      "id": "parse_intent",
      "name": "Parse Intent",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        650,
        400
      ],
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "try {\n  const response = $input.item.json.message || $input.item.json.choices?.[0]?.message?.content;\n  const parsed = JSON.parse(response);\n  \n  return {\n    json: {\n      ...parsed,\n      original_query: $('webhook_trigger').item.json.query,\n      needs_weather: parsed.tools_needed?.includes('weather'),\n      needs_scraping: parsed.tools_needed?.includes('web_scraping'),\n      needs_search: parsed.tools_needed?.includes('search')\n    }\n  };\n} catch (error) {\n  return {\n    json: {\n      intent: 'general',\n      tools_needed: ['content_generation'],\n      original_query: $('webhook_trigger').item.json.query,\n      error: error.message\n    }\n  };\n}"
      }
    },
    {
      "id": "weather_branch",
      "name": "Weather Check",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        850,
        200
      ],
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{ $json.needs_weather }}",
              "value2": true
            }
          ]
        }
      }
    },
    {
      "id": "get_weather",
      "name": "Get Weather Data",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        1050,
        150
      ],
      "parameters": {
        "method": "GET",
        "url": "=http://api.openweathermap.org/data/2.5/weather?q={{ $('parse_intent').item.json.location || 'London' }}&appid={{ $env.OPENWEATHER_API_KEY }}&units=metric",
        "options": {
          "timeout": 10000
        }
      }
    },
    {
      "id": "scraping_branch",
      "name": "Scraping Check",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        850,
        350
      ],
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{ $json.needs_scraping }}",
              "value2": true
            }
          ]
        }
      }
    },
    {
      "id": "web_scraping",
      "name": "Web Scraping with Firecrawl",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        1050,
        300
      ],
      "parameters": {
        "method": "POST",
        "url": "https://api.firecrawl.dev/v0/scrape",
        "sendBody": true,
        "specifyBodyType": "json",
        "jsonBody": "={\n  \"url\": \"{{ $('parse_intent').item.json.url || 'https://example.com' }}\",\n  \"formats\": [\"markdown\", \"html\"]\n}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer {{ $env.FIRECRAWL_API_KEY }}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        }
      }
    },
    {
      "id": "search_branch",
      "name": "Search Check",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        850,
        500
      ],
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{ $json.needs_search }}",
              "value2": true
            }
          ]
        }
      }
    },
    {
      "id": "web_search",
      "name": "Web Search with Apify",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        1050,
        450
      ],
      "parameters": {
        "method": "POST",
        "url": "https://api.apify.com/v2/acts/apify~google-search-scraper/run-sync-get-dataset-items",
        "sendBody": true,
        "specifyBodyType": "json",
        "jsonBody": "={\n  \"queries\": \"{{ $('parse_intent').item.json.original_query }}\",\n  \"resultsPerPage\": 10,\n  \"countryCode\": \"US\",\n  \"languageCode\": \"en\"\n}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer {{ $env.APIFY_API_TOKEN }}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        }
      }
    },
    {
      "id": "merge_data",
      "name": "Merge All Data",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3,
      "position": [
        1250,
        400
      ],
      "parameters": {
        "mode": "combine",
        "mergeByPosition": true,
        "options": {}
      }
    },
    {
      "id": "ai_synthesizer",
      "name": "AI Data Synthesizer",
      "type": "n8n-nodes-base.openAi",
      "typeVersion": 1,
      "position": [
        1450,
        400
      ],
      "parameters": {
        "model": "gpt-4-turbo",
        "prompt": "You are an advanced AI assistant with access to multiple data sources. Based on the user's query and the data collected, provide a comprehensive and helpful response.\n\nOriginal Query: {{ $('parse_intent').item.json.original_query }}\n\nData Available:\n{{ JSON.stringify($json, null, 2) }}\n\nProvide a well-structured, informative response that directly addresses the user's query using the available data.",
        "temperature": 0.7,
        "maxTokens": 1500
      }
    },
    {
      "id": "format_response",
      "name": "Format Final Response",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3,
      "position": [
        1650,
        400
      ],
      "parameters": {
        "mode": "manual",
        "assignments": [
          {
            "name": "response",
            "type": "string",
            "value": "={{ $json.message || $json.choices?.[0]?.message?.content }}"
          },
          {
            "name": "query",
            "type": "string",
            "value": "={{ $('parse_intent').item.json.original_query }}"
          },
          {
            "name": "tools_used",
            "type": "object",
            "value": "={{ $('parse_intent').item.json.tools_needed }}"
          },
          {
            "name": "timestamp",
            "type": "string",
            "value": "={{ new Date().toISOString() }}"
          },
          {
            "name": "status",
            "type": "string",
            "value": "success"
          }
        ]
      }
    },
    {
      "id": "webhook_response",
      "name": "Webhook Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        1850,
        400
      ],
      "parameters": {
        "responseMode": "json",
        "responseCode": 200
      }
    }
  ],
  "connections": {
    "webhook_trigger": {
      "main": [
        [
          {
            "node": "extract_intent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "extract_intent": {
      "main": [
        [
          {
            "node": "parse_intent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "parse_intent": {
      "main": [
        [
          {
            "node": "weather_branch",
            "type": "main",
            "index": 0
          },
          {
            "node": "scraping_branch",
            "type": "main",
            "index": 0
          },
          {
            "node": "search_branch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "weather_branch": {
      "main": [
        [
          {
            "node": "get_weather",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "merge_data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "get_weather": {
      "main": [
        [
          {
            "node": "merge_data",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "scraping_branch": {
      "main": [
        [
          {
            "node": "web_scraping",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "merge_data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "web_scraping": {
      "main": [
        [
          {
            "node": "merge_data",
            "type": "main",
            "index": 2
          }
        ]
      ]
    },
    "search_branch": {
      "main": [
        [
          {
            "node": "web_search",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "merge_data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "web_search": {
      "main": [
        [
          {
            "node": "merge_data",
            "type": "main",
            "index": 3
          }
        ]
      ]
    },
    "merge_data": {
      "main": [
        [
          {
            "node": "ai_synthesizer",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "ai_synthesizer": {
      "main": [
        [
          {
            "node": "format_response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "format_response": {
      "main": [
        [
          {
            "node": "webhook_response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {}
}