{
  "name": "AI Research Analyst with Multiple Models",
  "description": "Advanced research agent using multiple AI models and data sources",
  "nodes": [
    {
      "id": "webhook_trigger",
      "name": "Research Request",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1.1,
      "position": [250, 400],
      "parameters": {
        "path": "research-analyst",
        "method": "POST"
      }
    },
    {
      "id": "research_planner",
      "name": "Research Planning (GPT-4)",
      "type": "n8n-nodes-base.openAi",
      "typeVersion": 1,
      "position": [450, 400],
      "parameters": {
        "model": "gpt-4",
        "prompt": "You are a research planning AI. Create a comprehensive research plan for: {{ $json.topic }}\n\nOutput JSON with:\n{\n  \"research_questions\": [\"question1\", \"question2\"],\n  \"search_terms\": [\"term1\", \"term2\"],\n  \"data_sources_needed\": [\"web\", \"weather\", \"academic\"],\n  \"analysis_approach\": \"description\"\n}",
        "temperature": 0.4,
        "maxTokens": 800
      }
    },
    {
      "id": "parse_plan",
      "name": "Parse Research Plan",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [650, 400],
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "try {\n  const response = $input.item.json.message || $input.item.json.choices?.[0]?.message?.content;\n  const plan = JSON.parse(response);\n  \n  return {\n    json: {\n      ...plan,\n      original_topic: $('webhook_trigger').item.json.topic,\n      research_depth: $('webhook_trigger').item.json.depth || 'standard'\n    }\n  };\n} catch (error) {\n  return {\n    json: {\n      research_questions: ['What is ' + $('webhook_trigger').item.json.topic + '?'],\n      search_terms: [$('webhook_trigger').item.json.topic],\n      data_sources_needed: ['web'],\n      original_topic: $('webhook_trigger').item.json.topic\n    }\n  };\n}"
      }
    },
    {
      "id": "parallel_research",
      "name": "Start Parallel Research",
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [850, 400],
      "parameters": {
        "batchSize": 1,
        "options": {}
      }
    },
    {
      "id": "web_research",
      "name": "Web Research (Apify)",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [1050, 200],
      "parameters": {
        "method": "POST",
        "url": "https://api.apify.com/v2/acts/apify~google-search-scraper/run-sync-get-dataset-items",
        "sendBody": true,
        "specifyBodyType": "json",
        "jsonBody": "={\n  \"queries\": \"{{ $json.search_terms.join(' OR ') }}\",\n  \"resultsPerPage\": 15,\n  \"countryCode\": \"US\",\n  \"languageCode\": \"en\"\n}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer {{ $env.APIFY_API_TOKEN }}"
            }
          ]
        }
      }
    },
    {
      "id": "deep_web_scraping",
      "name": "Deep Content Scraping",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [1050, 350],
      "parameters": {
        "method": "POST",
        "url": "https://api.firecrawl.dev/v0/crawl",
        "sendBody": true,
        "specifyBodyType": "json",
        "jsonBody": "={\n  \"url\": \"{{ $json.original_topic.includes('http') ? $json.original_topic : 'https://en.wikipedia.org/wiki/' + $json.original_topic.replace(' ', '_') }}\",\n  \"limit\": 5,\n  \"scrapeOptions\": {\n    \"formats\": [\"markdown\"]\n  }\n}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer {{ $env.FIRECRAWL_API_KEY }}"
            }
          ]
        }
      }
    },
    {
      "id": "gpt4_analysis",
      "name": "GPT-4 Analysis",
      "type": "n8n-nodes-base.openAi",
      "typeVersion": 1,
      "position": [1250, 250],
      "parameters": {
        "model": "gpt-4-turbo",
        "prompt": "Analyze the research data for: {{ $('parse_plan').item.json.original_topic }}\n\nWeb Research Results: {{ JSON.stringify($('web_research').item.json, null, 2) }}\n\nProvide detailed analysis focusing on:\n1. Key findings\n2. Data quality assessment\n3. Identified trends\n4. Potential gaps",
        "temperature": 0.3,
        "maxTokens": 1200
      }
    },
    {
      "id": "deepseek_analysis",
      "name": "DeepSeek Analysis",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [1250, 400],
      "parameters": {
        "method": "POST",
        "url": "https://api.deepseek.com/chat/completions",
        "sendBody": true,
        "specifyBodyType": "json",
        "jsonBody": "={\n  \"model\": \"deepseek-chat\",\n  \"messages\": [\n    {\n      \"role\": \"system\",\n      \"content\": \"You are a technical analyst specializing in deep technical analysis and code understanding.\"\n    },\n    {\n      \"role\": \"user\",\n      \"content\": \"Provide technical analysis for: {{ $('parse_plan').item.json.original_topic }}\\n\\nScraping Data: {{ JSON.stringify($('deep_web_scraping').item.json, null, 2) }}\\n\\nFocus on technical aspects, implementation details, and technical feasibility.\"\n    }\n  ],\n  \"temperature\": 0.2,\n  \"max_tokens\": 1000\n}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization", 
              "value": "Bearer {{ $env.DEEPSEEK_API_KEY }}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        }
      }
    },
    {
      "id": "gemini_synthesis",
      "name": "Gemini Synthesis",
      "type": "n8n-nodes-base.httpRequest", 
      "typeVersion": 4.1,
      "position": [1250, 550],
      "parameters": {
        "method": "POST",
        "url": "https://generativelanguage.googleapis.com/v1/models/gemini-1.5-flash:generateContent?key={{ $env.GOOGLE_AI_API_KEY }}",
        "sendBody": true,
        "specifyBodyType": "json",
        "jsonBody": "={\n  \"contents\": [{\n    \"parts\": [{\n      \"text\": \"Synthesize research findings for: {{ $('parse_plan').item.json.original_topic }}\\n\\nGPT-4 Analysis: {{ $('gpt4_analysis').item.json.message }}\\n\\nDeepSeek Analysis: {{ $('deepseek_analysis').item.json.choices?.[0]?.message?.content }}\\n\\nProvide a comprehensive synthesis that combines all perspectives and identifies the most reliable insights.\"\n    }]\n  }],\n  \"generationConfig\": {\n    \"temperature\": 0.4,\n    \"maxOutputTokens\": 1500\n  }\n}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        }
      }
    },
    {
      "id": "final_report",
      "name": "Generate Final Report",
      "type": "n8n-nodes-base.openAi",
      "typeVersion": 1,
      "position": [1450, 400],
      "parameters": {
        "model": "gpt-4",
        "prompt": "Create a comprehensive research report for: {{ $('parse_plan').item.json.original_topic }}\n\nResearch Plan: {{ JSON.stringify($('parse_plan').item.json, null, 2) }}\n\nGPT-4 Analysis: {{ $('gpt4_analysis').item.json.message }}\n\nDeepSeek Technical Analysis: {{ $('deepseek_analysis').item.json.choices?.[0]?.message?.content }}\n\nGemini Synthesis: {{ $('gemini_synthesis').item.json.candidates?.[0]?.content?.parts?.[0]?.text }}\n\nGenerate a well-structured research report with:\n1. Executive Summary\n2. Key Findings\n3. Technical Analysis\n4. Cross-Model Consensus\n5. Recommendations\n6. Areas for Further Research",
        "temperature": 0.6,
        "maxTokens": 2000
      }
    },
    {
      "id": "format_output",
      "name": "Format Research Output",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3,
      "position": [1650, 400],
      "parameters": {
        "mode": "manual",
        "assignments": [
          {
            "name": "research_topic",
            "type": "string",
            "value": "={{ $('parse_plan').item.json.original_topic }}"
          },
          {
            "name": "final_report",
            "type": "string",
            "value": "={{ $json.message || $json.choices?.[0]?.message?.content }}"
          },
          {
            "name": "research_plan",
            "type": "object",
            "value": "={{ $('parse_plan').item.json }}"
          },
          {
            "name": "models_used",
            "type": "array",
            "value": "[\"GPT-4\", \"DeepSeek\", \"Gemini\"]"
          },
          {
            "name": "research_completed_at",
            "type": "string",
            "value": "={{ new Date().toISOString() }}"
          },
          {
            "name": "data_sources",
            "type": "array", 
            "value": "[\"Web Search\", \"Firecrawl\", \"Multiple AI Models\"]"
          }
        ]
      }
    },
    {
      "id": "respond",
      "name": "Return Research",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [1850, 400],
      "parameters": {
        "responseMode": "json"
      }
    }
  ],
  "connections": {
    "webhook_trigger": {
      "main": [[{"node": "research_planner", "type": "main", "index": 0}]]
    },
    "research_planner": {
      "main": [[{"node": "parse_plan", "type": "main", "index": 0}]]
    },
    "parse_plan": {
      "main": [[{"node": "parallel_research", "type": "main", "index": 0}]]
    },
    "parallel_research": {
      "main": [
        [
          {"node": "web_research", "type": "main", "index": 0},
          {"node": "deep_web_scraping", "type": "main", "index": 0}
        ]
      ]
    },
    "web_research": {
      "main": [[{"node": "gpt4_analysis", "type": "main", "index": 0}]]
    },
    "deep_web_scraping": {
      "main": [[{"node": "deepseek_analysis", "type": "main", "index": 0}]]
    },
    "gpt4_analysis": {
      "main": [[{"node": "gemini_synthesis", "type": "main", "index": 0}]]
    },
    "deepseek_analysis": {
      "main": [[{"node": "gemini_synthesis", "type": "main", "index": 0}]]
    },
    "gemini_synthesis": {
      "main": [[{"node": "final_report", "type": "main", "index": 0}]]
    },
    "final_report": {
      "main": [[{"node": "format_output", "type": "main", "index": 0}]]
    },
    "format_output": {
      "main": [[{"node": "respond", "type": "main", "index": 0}]]
    }
  },
  "settings": {}
}