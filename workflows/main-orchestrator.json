{
  "name": "Main Orchestrator - B2C Platform",
  "nodes": [
    {
      "parameters": {
        "path": "/webhook/api/orchestrate",
        "method": "POST",
        "responseMode": "responseNode",
        "options": {
          "responseHeaders": {
            "entries": [
              {
                "name": "X-Request-ID",
                "value": "={{ $execution.id }}"
              }
            ]
          }
        }
      },
      "id": "webhook-main",
      "name": "Main Entry Point",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1.1,
      "position": [
        250,
        300
      ],
      "webhookId": "main-orchestrator"
    },
    {
      "parameters": {
        "jsCode": "// Validate authentication and rate limits\nconst input = $input.first().json;\nconst headers = $input.first().headers;\n\n// Extract user info (simplified - in production use JWT)\nconst userId = input.user_id || headers['x-user-id'] || 'anonymous';\nconst apiKey = headers['x-api-key'] || input.api_key;\n\n// Validate required fields\nif (!input.service) {\n    throw new Error('Missing required field: service');\n}\n\nif (!input.data) {\n    throw new Error('Missing required field: data');\n}\n\n// Check if service exists\nconst validServices = [\"document_analytics\",\"task_scheduling\",\"api_automation\",\"marketing_automation\",\"data_transformation\"];\nif (!validServices.includes(input.service)) {\n    throw new Error(`Invalid service: ${input.service}. Valid services: ${validServices.join(', ')}`);\n}\n\n// TODO: Check rate limits from database\nconst userTier = apiKey ? 'pro' : 'free';\nconst rateLimit = {\"free\":{\"requests_per_day\":100,\"concurrent_jobs\":3},\"pro\":{\"requests_per_day\":1000,\"concurrent_jobs\":10},\"enterprise\":{\"requests_per_day\":-1,\"concurrent_jobs\":50}};\nconst userLimits = rateLimit[userTier];\n\n// Create execution context\nconst context = {\n    execution_id: $execution.id,\n    user_id: userId,\n    user_tier: userTier,\n    service: input.service,\n    timestamp: new Date().toISOString(),\n    rate_limits: userLimits,\n    request_data: input.data,\n    metadata: input.metadata || {}\n};\n\nreturn context;"
      },
      "id": "validate-auth",
      "name": "Validate & Auth",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        450,
        300
      ]
    },
    {
      "parameters": {
        "operation": "get",
        "schema": "public",
        "table": "sessions",
        "returnAll": false,
        "limit": 1,
        "filterType": "manual",
        "filters": {
          "conditions": [
            {
              "field": "user_id",
              "type": "string",
              "operation": "equals",
              "value": "={{ $json.user_id }}"
            }
          ]
        },
        "additionalFields": {}
      },
      "id": "get-session",
      "name": "Get User Session",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        650,
        200
      ],
      "credentials": {
        "supabaseApi": {
          "id": "supabase-credentials",
          "name": "Supabase"
        }
      },
      "continueOnFail": true
    },
    {
      "parameters": {
        "jsCode": "// Manage user session\nconst context = $input.first().json;\nconst sessionData = $('Get User Session').first().json;\n\nlet session;\nif (sessionData && !sessionData.error) {\n    // Update existing session\n    session = {\n        ...sessionData,\n        last_activity: new Date().toISOString(),\n        request_count: (sessionData.request_count || 0) + 1\n    };\n} else {\n    // Create new session\n    session = {\n        id: `session_${Date.now()}`,\n        user_id: context.user_id,\n        created_at: new Date().toISOString(),\n        last_activity: new Date().toISOString(),\n        request_count: 1,\n        context: {}\n    };\n}\n\n// Add session to context\ncontext.session = session;\n\n// Check concurrent jobs\nif (session.active_jobs >= context.rate_limits.concurrent_jobs) {\n    throw new Error(`Concurrent job limit reached. Maximum: ${context.rate_limits.concurrent_jobs}`);\n}\n\nreturn context;"
      },
      "id": "session-manager",
      "name": "Session Manager",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        850,
        300
      ]
    },
    {
      "parameters": {
        "mode": "expression",
        "value": "={{ $json.service }}",
        "options": {}
      },
      "id": "service-router",
      "name": "Route to Service",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3,
      "position": [
        1050,
        300
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ 'https://clixen.app.n8n.cloud/webhook/' + $json.service }}",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "execution_id",
              "value": "={{ $json.execution_id }}"
            },
            {
              "name": "user_id",
              "value": "={{ $json.user_id }}"
            },
            {
              "name": "data",
              "value": "={{ $json.request_data }}"
            },
            {
              "name": "session",
              "value": "={{ $json.session }}"
            }
          ]
        },
        "options": {
          "timeout": 30000
        }
      },
      "id": "execute-service",
      "name": "Execute Service",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        1250,
        300
      ]
    },
    {
      "parameters": {
        "operation": "insert",
        "schema": "public",
        "table": "executions",
        "columns": "user_id,workflow_type,status,input_data,started_at",
        "additionalFields": {}
      },
      "id": "log-execution",
      "name": "Log Execution",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        1250,
        450
      ],
      "credentials": {
        "supabaseApi": {
          "id": "supabase-credentials",
          "name": "Supabase"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Prepare response\nconst context = $input.first().json;\nconst serviceResult = $('Execute Service').first().json;\n\nconst response = {\n    success: true,\n    execution_id: context.execution_id,\n    service: context.service,\n    status: serviceResult.status || 'completed',\n    result: serviceResult,\n    processing_time_ms: Date.now() - new Date(context.timestamp).getTime(),\n    timestamp: new Date().toISOString()\n};\n\n// Handle async jobs\nif ({\"document_analytics\":{\"webhook\":\"document-analytics\",\"timeout\":30000,\"async\":true},\"task_scheduling\":{\"webhook\":\"task-scheduler\",\"timeout\":5000,\"async\":false},\"api_automation\":{\"webhook\":\"api-automation\",\"timeout\":20000,\"async\":true},\"marketing_automation\":{\"webhook\":\"marketing-automation\",\"timeout\":10000,\"async\":true},\"data_transformation\":{\"webhook\":\"data-transformation\",\"timeout\":15000,\"async\":true}}[context.service].async) {\n    response.message = 'Job queued for processing. Use execution_id to check status.';\n    response.status = 'processing';\n}\n\nreturn response;"
      },
      "id": "prepare-response",
      "name": "Prepare Response",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1450,
        300
      ]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": {
          "json": "={{ $json }}"
        },
        "options": {
          "responseCode": 200
        }
      },
      "id": "respond",
      "name": "Send Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        1650,
        300
      ]
    },
    {
      "parameters": {
        "jsCode": "// Error handler\nconst error = $input.first().error;\nconst context = $input.all()[0].json;\n\n// Log error\nconsole.error('Orchestrator Error:', error);\n\n// Prepare error response\nconst errorResponse = {\n    success: false,\n    error: {\n        code: error.code || 'ORCHESTRATOR_ERROR',\n        message: error.message || 'An error occurred',\n        details: error.details || {}\n    },\n    execution_id: context?.execution_id || $execution.id,\n    timestamp: new Date().toISOString()\n};\n\n// Log to database (if possible)\n// TODO: Add error logging to Supabase\n\nreturn errorResponse;"
      },
      "id": "error-handler",
      "name": "Error Handler",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1450,
        500
      ]
    }
  ],
  "connections": {
    "Main Entry Point": {
      "main": [
        [
          {
            "node": "Validate & Auth",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validate & Auth": {
      "main": [
        [
          {
            "node": "Get User Session",
            "type": "main",
            "index": 0
          },
          {
            "node": "Session Manager",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get User Session": {
      "main": [
        [
          {
            "node": "Session Manager",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Session Manager": {
      "main": [
        [
          {
            "node": "Route to Service",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Route to Service": {
      "main": [
        [
          {
            "node": "Execute Service",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Execute Service",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Execute Service",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Execute Service",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Execute Service",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute Service": {
      "main": [
        [
          {
            "node": "Log Execution",
            "type": "main",
            "index": 0
          },
          {
            "node": "Prepare Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Response": {
      "main": [
        [
          {
            "node": "Send Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Error Handler": {
      "main": [
        [
          {
            "node": "Send Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {}
}