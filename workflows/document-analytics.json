{
  "name": "Document Analytics Service",
  "nodes": [
    {
      "parameters": {
        "path": "/analytics/document",
        "method": "POST",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "webhook-trigger",
      "name": "Document Upload Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1.1,
      "position": [
        250,
        300
      ],
      "webhookId": "document-analytics"
    },
    {
      "parameters": {
        "jsCode": "// Validate input and check user quota\nconst input = $input.first().json;\n\n// Validate required fields\nif (!input.user_id || !input.file_url) {\n    throw new Error('Missing required fields: user_id and file_url');\n}\n\n// Check file type\nconst allowedTypes = ['pdf', 'csv', 'xlsx', 'docx', 'txt'];\nconst fileType = input.file_type || 'unknown';\nif (!allowedTypes.includes(fileType)) {\n    throw new Error(`Unsupported file type: ${fileType}`);\n}\n\n// Check file size (if provided)\nif (input.file_size_mb && input.file_size_mb > 100) {\n    throw new Error('File size exceeds 100MB limit');\n}\n\n// TODO: Check user quota from database\n\nreturn {\n    ...input,\n    validation_passed: true,\n    timestamp: new Date().toISOString()\n};"
      },
      "id": "validate-input",
      "name": "Validate Input",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        450,
        300
      ]
    },
    {
      "parameters": {
        "url": "={{ $json.file_url }}",
        "options": {
          "timeout": 30000,
          "response": {
            "response": {
              "responseFormat": "file"
            }
          }
        }
      },
      "id": "download-file",
      "name": "Download Document",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        650,
        300
      ]
    },
    {
      "parameters": {
        "mode": "expression",
        "value": "={{ $json.file_type }}",
        "options": {}
      },
      "id": "file-type-switch",
      "name": "Route by File Type",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3,
      "position": [
        850,
        300
      ]
    },
    {
      "parameters": {
        "jsCode": "// Extract and analyze document content\n// This is a simplified version - actual implementation would use\n// specialized libraries for each file type\n\nconst fileType = $input.first().json.file_type;\nconst fileContent = $input.first().binary.data;\n\nlet extractedData = {};\nlet statistics = {};\n\n// Simulate content extraction based on file type\nswitch(fileType) {\n    case 'csv':\n        // Parse CSV data\n        extractedData = {\n            rows: 100,\n            columns: 10,\n            headers: ['Date', 'Value', 'Category'],\n            sample_data: []\n        };\n        break;\n    case 'pdf':\n        // Extract PDF text\n        extractedData = {\n            pages: 10,\n            text_length: 5000,\n            tables_found: 2\n        };\n        break;\n    case 'xlsx':\n        // Parse Excel data\n        extractedData = {\n            sheets: 3,\n            total_cells: 500,\n            formulas: 20\n        };\n        break;\n}\n\n// Calculate statistics\nstatistics = {\n    total_records: extractedData.rows || 0,\n    data_points: extractedData.columns || 0,\n    processing_time_ms: Date.now() - new Date($json.timestamp).getTime()\n};\n\nreturn {\n    file_type: fileType,\n    extracted_data: extractedData,\n    statistics: statistics,\n    user_id: $json.user_id\n};"
      },
      "id": "extract-content",
      "name": "Extract & Analyze Content",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1050,
        300
      ]
    },
    {
      "parameters": {
        "resource": "chatCompletion",
        "model": "gpt-4o-mini",
        "messages": {
          "values": [
            {
              "role": "system",
              "content": "You are a data analyst expert. Analyze the provided data and generate key insights, patterns, and actionable recommendations."
            },
            {
              "role": "user",
              "content": "={{ 'Analyze this data:\\n' + JSON.stringify($json.extracted_data) + '\\n\\nProvide insights in JSON format with keys: summary, key_findings, recommendations, trends' }}"
            }
          ]
        },
        "options": {
          "temperature": 0.3,
          "maxTokens": 1000
        }
      },
      "id": "ai-insights",
      "name": "Generate AI Insights",
      "type": "n8n-nodes-base.openAi",
      "typeVersion": 1,
      "position": [
        1250,
        300
      ],
      "credentials": {
        "openAiApi": {
          "id": "openai-credentials",
          "name": "OpenAI"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Generate visualizations (mock data for now)\n// In production, this would use Chart.js or similar\n\nconst data = $json;\nconst insights = $input.first().json;\n\n// Create chart configurations\nconst charts = [\n    {\n        type: 'bar',\n        title: 'Data Distribution',\n        data: {\n            labels: ['Category A', 'Category B', 'Category C'],\n            values: [30, 45, 25]\n        }\n    },\n    {\n        type: 'line',\n        title: 'Trend Analysis',\n        data: {\n            labels: ['Jan', 'Feb', 'Mar', 'Apr'],\n            values: [100, 120, 115, 140]\n        }\n    },\n    {\n        type: 'pie',\n        title: 'Composition Breakdown',\n        data: {\n            labels: ['Type 1', 'Type 2', 'Type 3'],\n            values: [40, 35, 25]\n        }\n    }\n];\n\n// Create report structure\nconst report = {\n    title: 'Document Analysis Report',\n    generated_at: new Date().toISOString(),\n    user_id: data.user_id,\n    file_type: data.file_type,\n    statistics: data.statistics,\n    insights: insights,\n    charts: charts,\n    executive_summary: 'This document contains valuable insights about your data patterns and trends.'\n};\n\nreturn report;"
      },
      "id": "generate-visualizations",
      "name": "Create Visualizations",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1450,
        300
      ]
    },
    {
      "parameters": {
        "operation": "insert",
        "schema": "public",
        "table": "analytics_jobs",
        "columns": "user_id,file_type,analysis_type,results,charts,created_at",
        "additionalFields": {}
      },
      "id": "save-to-database",
      "name": "Save to Supabase",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        1650,
        200
      ],
      "credentials": {
        "supabaseApi": {
          "id": "supabase-credentials",
          "name": "Supabase"
        }
      }
    },
    {
      "parameters": {
        "subject": "Your Document Analysis is Ready",
        "message": "={{ 'Hello,\\n\\nYour document analysis has been completed successfully.\\n\\nKey Findings:\\n' + $json.insights.summary + '\\n\\nYou can download your full report from the link below.\\n\\nBest regards,\\nAutomation Platform' }}",
        "toEmail": "={{ $json.user_email }}",
        "options": {
          "attachments": "report.pdf"
        }
      },
      "id": "send-email",
      "name": "Send Email Report",
      "type": "n8n-nodes-base.emailSend",
      "typeVersion": 2.1,
      "position": [
        1650,
        400
      ],
      "credentials": {
        "smtp": {
          "id": "smtp-credentials",
          "name": "SMTP"
        }
      }
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": {
          "json": {
            "success": true,
            "job_id": "={{ $json.job_id }}",
            "message": "Document analysis completed successfully",
            "report_url": "={{ $json.report_url }}",
            "processing_time_ms": "={{ $json.statistics.processing_time_ms }}"
          }
        },
        "options": {}
      },
      "id": "respond-webhook",
      "name": "Return Results",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        1850,
        300
      ]
    }
  ],
  "connections": {
    "Document Upload Webhook": {
      "main": [
        [
          {
            "node": "Validate Input",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validate Input": {
      "main": [
        [
          {
            "node": "Download Document",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Download Document": {
      "main": [
        [
          {
            "node": "Extract & Analyze Content",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract & Analyze Content": {
      "main": [
        [
          {
            "node": "Generate AI Insights",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate AI Insights": {
      "main": [
        [
          {
            "node": "Create Visualizations",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Visualizations": {
      "main": [
        [
          {
            "node": "Save to Supabase",
            "type": "main",
            "index": 0
          },
          {
            "node": "Send Email Report",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save to Supabase": {
      "main": [
        [
          {
            "node": "Return Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1",
    "saveManualExecutions": true,
    "callerPolicy": "workflowsFromSameOwner",
    "errorWorkflow": "global-error-handler"
  },
  "staticData": null,
  "tags": [
    {
      "name": "document-analytics",
      "createdAt": "2024-01-01T00:00:00.000Z"
    },
    {
      "name": "core-service",
      "createdAt": "2024-01-01T00:00:00.000Z"
    }
  ],
  "triggerCount": 0,
  "updatedAt": "2024-01-01T00:00:00.000Z",
  "versionId": "01"
}