{
  "name": "Execution Logger",
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "minutes",
              "minutesInterval": 5
            }
          ]
        }
      },
      "id": "schedule-trigger",
      "name": "Every 5 Minutes",
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.1,
      "position": [
        250,
        300
      ]
    },
    {
      "parameters": {
        "method": "GET",
        "url": "={{ $env.N8N_BASE_URL }}/api/v1/executions",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "X-N8N-API-KEY",
              "value": "={{ $env.N8N_API_KEY }}"
            }
          ]
        },
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "limit",
              "value": "20"
            },
            {
              "name": "status",
              "value": "all"
            }
          ]
        },
        "options": {}
      },
      "id": "get-executions",
      "name": "Get Recent Executions",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        450,
        300
      ]
    },
    {
      "parameters": {
        "jsCode": "// Process execution data\nconst executions = $input.first().json.data || [];\nconst processedExecutions = [];\n\nexecutions.forEach(exec => {\n  // Calculate duration\n  let duration_ms = null;\n  if (exec.startedAt && exec.stoppedAt) {\n    duration_ms = new Date(exec.stoppedAt) - new Date(exec.startedAt);\n  }\n  \n  // Format for logging\n  const logEntry = {\n    workflow_id: exec.workflowId,\n    workflow_name: exec.workflowData?.name || 'Unknown',\n    execution_id: exec.id,\n    status: exec.finished ? (exec.status || 'success') : 'running',\n    mode: exec.mode || 'trigger',\n    start_time: exec.startedAt,\n    end_time: exec.stoppedAt,\n    duration_ms: duration_ms,\n    error_message: exec.error?.message || null,\n    error_node: exec.error?.node || null,\n    retry_count: exec.retryOf ? 1 : 0,\n    data: {\n      node_count: exec.data?.resultData?.runData ? Object.keys(exec.data.resultData.runData).length : 0,\n      total_items: exec.data?.resultData?.lastNodeExecuted ? 1 : 0\n    },\n    metadata: {\n      execution_time: exec.executionTime,\n      wait_till: exec.waitTill\n    }\n  };\n  \n  processedExecutions.push(logEntry);\n});\n\nreturn processedExecutions;"
      },
      "id": "process-executions",
      "name": "Process Execution Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        650,
        300
      ]
    },
    {
      "parameters": {
        "operation": "insert",
        "schema": "public",
        "table": "execution_metrics",
        "columns": "workflow_id,workflow_name,execution_id,status,mode,start_time,end_time,duration_ms,error_message,error_node,retry_count,node_count,total_items,metadata,created_at",
        "additionalFields": {}
      },
      "id": "save-metrics",
      "name": "Save Metrics to Supabase",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        850,
        200
      ],
      "credentials": {
        "supabaseApi": {
          "id": "supabase-credentials",
          "name": "Supabase"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Calculate aggregate statistics\nconst executions = $('Process Execution Data').all();\n\nconst stats = {\n  total_executions: executions.length,\n  successful: executions.filter(e => e.json.status === 'success').length,\n  failed: executions.filter(e => e.json.status === 'error' || e.json.error_message).length,\n  running: executions.filter(e => e.json.status === 'running').length,\n  avg_duration: executions\n    .filter(e => e.json.duration_ms)\n    .reduce((sum, e, _, arr) => sum + e.json.duration_ms / arr.length, 0),\n  workflows: [...new Set(executions.map(e => e.json.workflow_name))].length,\n  timestamp: new Date().toISOString()\n};\n\nstats.success_rate = stats.total_executions > 0 ? \n  (stats.successful / stats.total_executions * 100).toFixed(2) + '%' : '0%';\n\nreturn stats;"
      },
      "id": "calculate-stats",
      "name": "Calculate Statistics",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        850,
        400
      ]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": {
          "json": {
            "processed": "={{ $('Process Execution Data').all().length }}",
            "saved_to_db": "={{ $('Save Metrics to Supabase').all().length }}",
            "statistics": "={{ $json }}",
            "timestamp": "={{ new Date().toISOString() }}"
          }
        },
        "options": {}
      },
      "id": "respond",
      "name": "Log Summary",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        1050,
        300
      ]
    }
  ],
  "connections": {
    "Every 5 Minutes": {
      "main": [
        [
          {
            "node": "Get Recent Executions",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Recent Executions": {
      "main": [
        [
          {
            "node": "Process Execution Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Execution Data": {
      "main": [
        [
          {
            "node": "Save Metrics to Supabase",
            "type": "main",
            "index": 0
          },
          {
            "node": "Calculate Statistics",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save Metrics to Supabase": {
      "main": [
        [
          {
            "node": "Log Summary",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Calculate Statistics": {
      "main": [
        [
          {
            "node": "Log Summary",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {}
}