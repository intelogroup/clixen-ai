{
  "name": "AI Agent with Chat Interface & Multiple Tools (vredrick MCP)",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "ai-agent-chat",
        "responseMode": "responseNode",
        "options": {
          "responseHeaders": {
            "entries": [
              {
                "name": "Content-Type",
                "value": "application/json"
              }
            ]
          }
        }
      },
      "id": "webhook",
      "name": "Chat Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        200,
        400
      ]
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "// Session and context management\nconst sessionId = $input.first().json.sessionId || 'session-' + Date.now();\nconst userId = $input.first().json.userId || 'user-' + Math.random().toString(36).substr(2, 9);\nconst message = $input.first().json.message || $input.first().json.query || '';\n\n// Initialize or retrieve session context\nconst context = {\n    sessionId,\n    userId,\n    message,\n    history: [],\n    metadata: {\n        timestamp: new Date().toISOString(),\n        requestCount: 1\n    }\n};\n\nreturn context;"
      },
      "id": "session-context",
      "name": "Session Context",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        400,
        400
      ]
    },
    {
      "parameters": {
        "prompt": "{{ $json.message }}",
        "systemMessage": "You are a helpful AI assistant with access to multiple tools. You can:\n1. Get weather information for any location\n2. Search for news and current events\n3. Perform calculations and data analysis\n4. Access memory and previous conversations\n5. Send emails and notifications\n\nAlways be helpful, accurate, and conversational. Use the appropriate tools when needed.",
        "options": {
          "temperature": 0.7,
          "maxTokens": 1000,
          "topP": 0.9
        }
      },
      "id": "ai-agent",
      "name": "AI Agent",
      "type": "n8n-nodes-langchain.agent",
      "typeVersion": 1,
      "position": [
        600,
        400
      ]
    },
    {
      "parameters": {
        "name": "getWeather",
        "description": "Get current weather for a location",
        "language": "javaScript",
        "jsCode": "// Weather Tool\nconst location = $input.params.location || 'New York';\n\n// Simulated weather data (would connect to real API)\nconst weather = {\n    location: location,\n    temperature: Math.floor(Math.random() * 30) + 50,\n    condition: ['Sunny', 'Cloudy', 'Rainy', 'Partly Cloudy'][Math.floor(Math.random() * 4)],\n    humidity: Math.floor(Math.random() * 50) + 30,\n    windSpeed: Math.floor(Math.random() * 20) + 5\n};\n\nreturn {\n    result: `Weather in ${location}: ${weather.temperature}Â°F, ${weather.condition}. Humidity: ${weather.humidity}%, Wind: ${weather.windSpeed} mph`\n};"
      },
      "id": "weather-tool",
      "name": "Weather Tool",
      "type": "n8n-nodes-langchain.toolCode",
      "typeVersion": 1,
      "position": [
        800,
        200
      ]
    },
    {
      "parameters": {
        "name": "getNews",
        "description": "Get latest news headlines",
        "language": "javaScript",
        "jsCode": "// News Tool\nconst topic = $input.params.topic || 'technology';\n\n// Simulated news (would connect to real API)\nconst headlines = [\n    'AI breakthrough announced by researchers',\n    'New sustainable energy solution discovered',\n    'Tech company launches innovative product',\n    'Global climate summit reaches agreement',\n    'Medical advancement offers new hope'\n];\n\nconst selectedNews = headlines.slice(0, 3);\n\nreturn {\n    result: `Latest ${topic} news:\\n${selectedNews.map((h, i) => `${i+1}. ${h}`).join('\\n')}`\n};"
      },
      "id": "news-tool",
      "name": "News Tool",
      "type": "n8n-nodes-langchain.toolCode",
      "typeVersion": 1,
      "position": [
        800,
        350
      ]
    },
    {
      "parameters": {
        "name": "calculate",
        "description": "Perform mathematical calculations",
        "language": "javaScript",
        "jsCode": "// Calculator Tool\nconst expression = $input.params.expression || '2 + 2';\n\ntry {\n    // Safe evaluation of mathematical expressions\n    const result = Function('\"use strict\"; return (' + expression + ')')();\n    return {\n        result: `${expression} = ${result}`\n    };\n} catch (error) {\n    return {\n        result: `Error: Could not calculate ${expression}`\n    };\n}"
      },
      "id": "calculator-tool",
      "name": "Calculator Tool",
      "type": "n8n-nodes-langchain.toolCode",
      "typeVersion": 1,
      "position": [
        800,
        500
      ]
    },
    {
      "parameters": {
        "name": "memory",
        "description": "Store and retrieve conversation memory",
        "language": "javaScript",
        "jsCode": "// Memory Tool\nconst action = $input.params.action || 'retrieve';\nconst data = $input.params.data || null;\nconst sessionId = $input.params.sessionId;\n\n// Simulated memory storage\nconst memory = {\n    sessionId: sessionId,\n    conversations: [],\n    facts: []\n};\n\nif (action === 'store' && data) {\n    memory.conversations.push({\n        timestamp: new Date().toISOString(),\n        data: data\n    });\n    return {\n        result: 'Memory stored successfully'\n    };\n} else {\n    return {\n        result: `Memory for session ${sessionId}: ${memory.conversations.length} items stored`\n    };\n}"
      },
      "id": "memory-tool",
      "name": "Memory Tool",
      "type": "n8n-nodes-langchain.toolCode",
      "typeVersion": 1,
      "position": [
        800,
        650
      ]
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "// Format the AI response\nconst aiResponse = $input.first().json.output || $input.first().json.response || 'No response';\nconst sessionId = $node[\"session-context\"].json.sessionId;\nconst timestamp = new Date().toISOString();\n\nreturn {\n    success: true,\n    sessionId: sessionId,\n    response: aiResponse,\n    timestamp: timestamp,\n    metadata: {\n        model: 'AI Agent',\n        tools_used: $input.first().json.tools_used || [],\n        processing_time: Date.now() - new Date($node[\"session-context\"].json.metadata.timestamp).getTime()\n    }\n};"
      },
      "id": "response-formatter",
      "name": "Response Formatter",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1000,
        400
      ]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json }}",
        "options": {}
      },
      "id": "send-response",
      "name": "Send Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        1200,
        400
      ]
    }
  ],
  "connections": {
    "webhook": {
      "main": [
        [
          {
            "node": "session-context",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "session-context": {
      "main": [
        [
          {
            "node": "ai-agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "ai-agent": {
      "main": [
        [
          {
            "node": "response-formatter",
            "type": "main",
            "index": 0
          }
        ]
      ],
      "tools": [
        [
          {
            "node": "weather-tool",
            "type": "tool",
            "index": 0
          }
        ],
        [
          {
            "node": "news-tool",
            "type": "tool",
            "index": 1
          }
        ],
        [
          {
            "node": "calculator-tool",
            "type": "tool",
            "index": 2
          }
        ],
        [
          {
            "node": "memory-tool",
            "type": "tool",
            "index": 3
          }
        ]
      ]
    },
    "response-formatter": {
      "main": [
        [
          {
            "node": "send-response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1",
    "saveDataSuccessExecution": "all",
    "saveManualExecutions": true
  }
}