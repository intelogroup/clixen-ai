{
  "name": "Global Error Handler",
  "nodes": [
    {
      "parameters": {},
      "id": "error-trigger",
      "name": "Error Trigger",
      "type": "n8n-nodes-base.errorTrigger",
      "typeVersion": 1,
      "position": [
        250,
        300
      ]
    },
    {
      "parameters": {
        "jsCode": "// Parse error details\nconst error = $input.first().json;\n\n// Extract error information\nconst errorData = {\n  execution_id: error.execution?.id || 'unknown',\n  workflow_id: error.workflow?.id || 'unknown',\n  workflow_name: error.workflow?.name || 'Unknown Workflow',\n  node_name: error.node?.name || 'Unknown Node',\n  node_type: error.node?.type || 'unknown',\n  error_type: error.message?.includes('timeout') ? 'TimeoutError' : \n              error.message?.includes('auth') ? 'AuthenticationError' :\n              error.message?.includes('rate') ? 'RateLimitError' :\n              'GeneralError',\n  error_message: error.message || 'Unknown error',\n  error_stack: error.stack || '',\n  error_code: error.code || '',\n  severity: error.message?.includes('critical') ? 'critical' : \n           error.message?.includes('warn') ? 'warning' : 'error',\n  timestamp: new Date().toISOString(),\n  context: {\n    execution_mode: error.mode || 'unknown',\n    retry_count: error.retryOf ? 1 : 0,\n    user: error.user || 'system'\n  }\n};\n\n// Prepare for multiple outputs\nreturn [\n  errorData,  // For Supabase\n  errorData   // For Alerting\n];"
      },
      "id": "parse-error",
      "name": "Parse Error Details",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        450,
        300
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "severity-check",
              "leftValue": "={{ $json.severity }}",
              "rightValue": "critical",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "or"
        },
        "options": {}
      },
      "id": "check-severity",
      "name": "Check Severity",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        650,
        400
      ]
    },
    {
      "parameters": {
        "operation": "insert",
        "schema": "public",
        "table": "error_logs",
        "columns": "workflow_id,workflow_name,node_name,node_type,error_type,error_message,error_stack,severity,execution_id,context,created_at",
        "additionalFields": {}
      },
      "id": "save-to-supabase",
      "name": "Save to Supabase",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        850,
        200
      ],
      "credentials": {
        "supabaseApi": {
          "id": "supabase-credentials",
          "name": "Supabase"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "{{ $env.ALERT_WEBHOOK_URL }}",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "alert_type",
              "value": "workflow_error"
            },
            {
              "name": "severity",
              "value": "={{ $json.severity }}"
            },
            {
              "name": "workflow",
              "value": "={{ $json.workflow_name }}"
            },
            {
              "name": "error",
              "value": "={{ $json.error_message }}"
            },
            {
              "name": "timestamp",
              "value": "={{ $json.timestamp }}"
            }
          ]
        },
        "options": {}
      },
      "id": "send-alert",
      "name": "Send Alert",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        850,
        500
      ]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": {
          "json": {
            "error_logged": true,
            "alert_sent": "={{ $json.severity === 'critical' }}",
            "severity": "={{ $json.severity }}",
            "timestamp": "={{ $json.timestamp }}"
          }
        },
        "options": {}
      },
      "id": "respond",
      "name": "Log Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        1050,
        300
      ]
    }
  ],
  "connections": {
    "Error Trigger": {
      "main": [
        [
          {
            "node": "Parse Error Details",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Error Details": {
      "main": [
        [
          {
            "node": "Check Severity",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Severity": {
      "main": [
        [
          {
            "node": "Save to Supabase",
            "type": "main",
            "index": 0
          },
          {
            "node": "Send Alert",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Save to Supabase",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save to Supabase": {
      "main": [
        [
          {
            "node": "Log Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send Alert": {
      "main": [
        [
          {
            "node": "Log Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {}
}