{
  "name": "Credit Usage Tracker - B2C Platform",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "/webhook/api/user/credits/consume",
        "responseMode": "onReceived",
        "options": {
          "rawBody": true,
          "allowedOrigins": "*"
        }
      },
      "id": "webhook-trigger",
      "name": "Webhook: Credit Consumption",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        250,
        300
      ]
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "// Validate incoming credit consumption data\nconst incomingData = $input.first().json;\n\n// Required fields validation\nconst requiredFields = ['user_id', 'credits_to_consume', 'service_type'];\nconst missingFields = [];\n\nfor (const field of requiredFields) {\n  if (incomingData[field] === undefined || incomingData[field] === null) {\n    missingFields.push(field);\n  }\n}\n\nif (missingFields.length > 0) {\n  throw new Error(`Missing required fields: ${missingFields.join(', ')}`);\n}\n\n// UUID validation for user_id\nconst uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;\nif (!uuidRegex.test(incomingData.user_id)) {\n  throw new Error('Invalid user_id format');\n}\n\n// Credits validation\nconst creditsToConsume = parseInt(incomingData.credits_to_consume);\nif (isNaN(creditsToConsume) || creditsToConsume <= 0) {\n  throw new Error('credits_to_consume must be a positive integer');\n}\n\nif (creditsToConsume > 1000) {\n  throw new Error('credits_to_consume cannot exceed 1000 per request');\n}\n\n// Service type validation\nconst validServiceTypes = ['document_analytics', 'task_automation', 'api_call', 'webhook_processing'];\nif (!validServiceTypes.includes(incomingData.service_type)) {\n  throw new Error(`Invalid service_type. Must be one of: ${validServiceTypes.join(', ')}`);\n}\n\nconst validatedData = {\n  user_id: incomingData.user_id.trim(),\n  credits_to_consume: creditsToConsume,\n  service_type: incomingData.service_type.trim(),\n  operation_id: incomingData.operation_id || null,\n  metadata: incomingData.metadata || {},\n  timestamp: new Date().toISOString()\n};\n\nreturn validatedData;"
      },
      "id": "validate-consumption-data",
      "name": "Validate Consumption Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        450,
        300
      ]
    },
    {
      "parameters": {
        "operation": "select",
        "schema": "public",
        "table": "usage_metrics",
        "filterType": "manual",
        "matchValue": "={{ $json.user_id }}",
        "options": {}
      },
      "id": "get-current-usage",
      "name": "Get Current Usage",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        650,
        300
      ],
      "credentials": {
        "supabaseApi": {
          "id": "supabase-main",
          "name": "Supabase B2C Platform"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "user-usage-exists",
              "leftValue": "={{ $json.length }}",
              "rightValue": 0,
              "operator": {
                "type": "number",
                "operation": "gt"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "check-user-usage-exists",
      "name": "Check User Usage Exists",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        850,
        300
      ]
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "// Calculate new usage and check if sufficient credits\nconst consumptionData = $input.first().json;\nconst currentUsage = $input.all()[1]?.json?.[0] || {};\n\nif (!currentUsage.user_id) {\n  throw new Error('User usage record not found');\n}\n\nconst creditsRemaining = currentUsage.credits_remaining || 0;\nconst creditsToConsume = consumptionData.credits_to_consume;\n\nif (creditsRemaining < creditsToConsume) {\n  throw new Error(`Insufficient credits. Required: ${creditsToConsume}, Available: ${creditsRemaining}`);\n}\n\n// Calculate new values\nconst newCreditsUsed = (currentUsage.credits_used || 0) + creditsToConsume;\nconst newCreditsRemaining = creditsRemaining - creditsToConsume;\n\n// Check for tier limits\nconst tier = currentUsage.tier || 'free';\nconst monthlyUsage = currentUsage.monthly_usage || 0;\nconst newMonthlyUsage = monthlyUsage + creditsToConsume;\n\n// Tier limits\nconst tierLimits = {\n  free: 100,\n  basic: 1000,\n  pro: 10000,\n  enterprise: 100000\n};\n\nconst monthlyLimit = tierLimits[tier] || tierLimits.free;\nif (newMonthlyUsage > monthlyLimit) {\n  throw new Error(`Monthly tier limit exceeded. Tier: ${tier}, Limit: ${monthlyLimit}, Would be: ${newMonthlyUsage}`);\n}\n\nconst calculatedUsage = {\n  user_id: consumptionData.user_id,\n  credits_used: newCreditsUsed,\n  credits_remaining: newCreditsRemaining,\n  monthly_usage: newMonthlyUsage,\n  service_type: consumptionData.service_type,\n  operation_id: consumptionData.operation_id,\n  tier: tier,\n  credits_consumed: creditsToConsume,\n  updated_at: new Date().toISOString(),\n  low_credits_warning: newCreditsRemaining < 10,\n  approaching_limit_warning: (newMonthlyUsage / monthlyLimit) > 0.8\n};\n\nreturn calculatedUsage;"
      },
      "id": "calculate-new-usage",
      "name": "Calculate New Usage",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1050,
        200
      ]
    },
    {
      "parameters": {
        "operation": "update",
        "schema": "public",
        "table": "usage_metrics",
        "filterType": "manual",
        "matchValue": "={{ $json.user_id }}",
        "columns": "credits_used,credits_remaining,monthly_usage,updated_at",
        "additionalFields": {}
      },
      "id": "update-usage-metrics",
      "name": "Update Usage Metrics",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        1250,
        200
      ],
      "credentials": {
        "supabaseApi": {
          "id": "supabase-main",
          "name": "Supabase B2C Platform"
        }
      }
    },
    {
      "parameters": {
        "operation": "insert",
        "schema": "public",
        "table": "credit_transactions",
        "columns": "user_id,transaction_type,credits_amount,service_type,operation_id,metadata,created_at",
        "additionalFields": {}
      },
      "id": "log-credit-transaction",
      "name": "Log Credit Transaction",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        1250,
        400
      ],
      "credentials": {
        "supabaseApi": {
          "id": "supabase-main",
          "name": "Supabase B2C Platform"
        }
      }
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "// Prepare credit transaction log\nconst usageData = $input.first().json;\nconst originalConsumption = $input.all()[0]?.json || {};\n\nconst transactionLog = {\n  user_id: usageData.user_id,\n  transaction_type: 'consumption',\n  credits_amount: usageData.credits_consumed,\n  service_type: usageData.service_type,\n  operation_id: usageData.operation_id,\n  metadata: {\n    ...originalConsumption.metadata,\n    credits_before: usageData.credits_remaining + usageData.credits_consumed,\n    credits_after: usageData.credits_remaining,\n    tier: usageData.tier,\n    monthly_usage_after: usageData.monthly_usage\n  },\n  created_at: new Date().toISOString()\n};\n\nreturn transactionLog;"
      },
      "id": "prepare-transaction-log",
      "name": "Prepare Transaction Log",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1050,
        400
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "low-credits-check",
              "leftValue": "={{ $json.low_credits_warning }}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "equal"
              }
            }
          ],
          "combinator": "or"
        },
        "options": {}
      },
      "id": "check-low-credits-warning",
      "name": "Check Low Credits Warning",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        1450,
        300
      ]
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "// Send low credits notification\nconst usageData = $input.first().json;\n\nconst notificationData = {\n  user_id: usageData.user_id,\n  notification_type: 'low_credits_warning',\n  title: 'Low Credits Warning',\n  message: `You have ${usageData.credits_remaining} credits remaining. Consider upgrading your plan to avoid service interruption.`,\n  priority: 'medium',\n  action_url: 'https://platform.b2cautomation.com/billing',\n  metadata: {\n    credits_remaining: usageData.credits_remaining,\n    tier: usageData.tier,\n    approaching_limit: usageData.approaching_limit_warning\n  },\n  created_at: new Date().toISOString()\n};\n\nreturn notificationData;"
      },
      "id": "prepare-low-credits-notification",
      "name": "Prepare Low Credits Notification",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1650,
        400
      ]
    },
    {
      "parameters": {
        "operation": "insert",
        "schema": "public",
        "table": "notifications",
        "columns": "user_id,notification_type,title,message,priority,action_url,metadata,created_at",
        "additionalFields": {}
      },
      "id": "create-low-credits-notification",
      "name": "Create Low Credits Notification",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        1850,
        400
      ],
      "credentials": {
        "supabaseApi": {
          "id": "supabase-main",
          "name": "Supabase B2C Platform"
        }
      }
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "// Prepare success response\nconst usageData = $input.first().json;\n\nconst response = {\n  success: true,\n  user_id: usageData.user_id,\n  credits_consumed: usageData.credits_consumed,\n  credits_remaining: usageData.credits_remaining,\n  monthly_usage: usageData.monthly_usage,\n  tier: usageData.tier,\n  service_type: usageData.service_type,\n  operation_id: usageData.operation_id,\n  warnings: {\n    low_credits: usageData.low_credits_warning,\n    approaching_monthly_limit: usageData.approaching_limit_warning\n  },\n  recommendations: usageData.low_credits_warning ? [\n    'Consider upgrading your plan',\n    'Purchase additional credits',\n    'Monitor your usage patterns'\n  ] : [],\n  billing_url: 'https://platform.b2cautomation.com/billing',\n  processed_at: new Date().toISOString()\n};\n\nreturn response;"
      },
      "id": "prepare-success-response",
      "name": "Prepare Success Response",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2050,
        300
      ]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json }}",
        "options": {}
      },
      "id": "success-response",
      "name": "Success Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        2250,
        300
      ]
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "// Handle user not found error\nconst errorResponse = {\n  success: false,\n  error: {\n    type: 'user_not_found',\n    message: 'User usage record not found. User may not be properly onboarded.',\n    code: 'USER_USAGE_NOT_FOUND',\n    timestamp: new Date().toISOString()\n  },\n  help_url: 'https://docs.b2cautomation.com/errors/user-not-found'\n};\n\nreturn errorResponse;"
      },
      "id": "handle-user-not-found",
      "name": "Handle User Not Found",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1050,
        600
      ]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json }}",
        "responseCode": 404,
        "options": {}
      },
      "id": "user-not-found-response",
      "name": "User Not Found Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        1250,
        600
      ]
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "// Handle insufficient credits error\nconst error = $input.first().json;\n\nconst errorResponse = {\n  success: false,\n  error: {\n    type: 'insufficient_credits',\n    message: error.message || 'Insufficient credits to complete this operation',\n    code: 'INSUFFICIENT_CREDITS',\n    timestamp: new Date().toISOString()\n  },\n  billing_url: 'https://platform.b2cautomation.com/billing',\n  help_url: 'https://docs.b2cautomation.com/errors/insufficient-credits'\n};\n\nreturn errorResponse;"
      },
      "id": "handle-insufficient-credits",
      "name": "Handle Insufficient Credits",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1250,
        700
      ]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json }}",
        "responseCode": 402,
        "options": {}
      },
      "id": "insufficient-credits-response",
      "name": "Insufficient Credits Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        1450,
        700
      ]
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "// Handle validation errors\nconst error = $input.first().json;\n\nconst errorResponse = {\n  success: false,\n  error: {\n    type: 'validation_error',\n    message: error.message || 'Invalid credit consumption data provided',\n    code: 'INVALID_CONSUMPTION_DATA',\n    timestamp: new Date().toISOString()\n  },\n  help_url: 'https://docs.b2cautomation.com/errors/validation'\n};\n\nreturn errorResponse;"
      },
      "id": "handle-validation-error",
      "name": "Handle Validation Error",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        450,
        600
      ]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json }}",
        "responseCode": 400,
        "options": {}
      },
      "id": "validation-error-response",
      "name": "Validation Error Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        650,
        600
      ]
    }
  ],
  "connections": {
    "Webhook: Credit Consumption": {
      "main": [
        [
          {
            "node": "Validate Consumption Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validate Consumption Data": {
      "main": [
        [
          {
            "node": "Get Current Usage",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Current Usage": {
      "main": [
        [
          {
            "node": "Check User Usage Exists",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check User Usage Exists": {
      "main": [
        [
          {
            "node": "Calculate New Usage",
            "type": "main",
            "index": 0
          },
          {
            "node": "Prepare Transaction Log",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Handle User Not Found",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Calculate New Usage": {
      "main": [
        [
          {
            "node": "Update Usage Metrics",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update Usage Metrics": {
      "main": [
        [
          {
            "node": "Check Low Credits Warning",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Transaction Log": {
      "main": [
        [
          {
            "node": "Log Credit Transaction",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Low Credits Warning": {
      "main": [
        [
          {
            "node": "Prepare Low Credits Notification",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Prepare Success Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Low Credits Notification": {
      "main": [
        [
          {
            "node": "Create Low Credits Notification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Low Credits Notification": {
      "main": [
        [
          {
            "node": "Prepare Success Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Success Response": {
      "main": [
        [
          {
            "node": "Success Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Handle User Not Found": {
      "main": [
        [
          {
            "node": "User Not Found Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Handle Insufficient Credits": {
      "main": [
        [
          {
            "node": "Insufficient Credits Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Handle Validation Error": {
      "main": [
        [
          {
            "node": "Validation Error Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1",
    "saveDataErrorExecution": "all",
    "saveDataSuccessExecution": "all",
    "callerPolicy": "workflowsFromSameOwner",
    "executionTimeout": 300,
    "maxExecutionTime": 600
  },
  "staticData": null,
  "tags": [
    "credit-tracking",
    "usage-monitoring",
    "supabase",
    "webhook",
    "b2c-platform",
    "billing"
  ],
  "triggerCount": 0,
  "updatedAt": "2025-08-22T00:00:00.000Z",
  "versionId": null
}