# Clixen AI - Promtail Development Configuration
# Maximum logging detail for development debugging
# Collects all possible log sources

server:
  http_listen_port: 9080
  grpc_listen_port: 0
  log_level: debug

positions:
  filename: /tmp/positions/positions.yaml

clients:
  - url: http://loki:3100/loki/api/v1/push
    timeout: 30s
    backoff_config:
      min_period: 500ms
      max_period: 5m
      max_retries: 20

scrape_configs:
  # Docker container logs - ALL containers
  - job_name: docker-containers
    docker_sd_configs:
      - host: unix:///var/run/docker.sock
        refresh_interval: 5s
        filters:
          - name: status
            values: ["running"]
    relabel_configs:
      - source_labels: ['__meta_docker_container_name']
        regex: '/(.*)'
        target_label: 'container_name'
      - source_labels: ['__meta_docker_container_id']
        target_label: 'container_id'
      - source_labels: ['__meta_docker_container_log_stream']
        target_label: 'stream'
      - source_labels: ['__meta_docker_container_label_com_docker_compose_service']
        target_label: 'compose_service'
    pipeline_stages:
      - json:
          expressions:
            timestamp: timestamp
            level: level
            message: message
            output: log
      - timestamp:
          source: timestamp
          format: RFC3339Nano
          fallback_formats:
            - '2006-01-02T15:04:05.000000000Z07:00'
            - '2006-01-02T15:04:05Z07:00'
            - Unix
      - labels:
          level:
          stream:

  # n8n specific logs - MAXIMUM DETAIL
  - job_name: n8n-logs
    docker_sd_configs:
      - host: unix:///var/run/docker.sock
        refresh_interval: 5s
    relabel_configs:
      - source_labels: ['__meta_docker_container_name']
        regex: '.*(n8n).*'
        target_label: 'service'
        replacement: 'n8n'
      - source_labels: ['__meta_docker_container_name']
        regex: '.*(n8n).*'
        action: keep
    pipeline_stages:
      # Parse n8n log formats
      - json:
          expressions:
            timestamp: timestamp
            level: level
            message: message
            executionId: executionId
            workflowId: workflowId
            userId: userId
            sessionId: sessionId
      - regex:
          expression: '^(?P<timestamp>\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d{3}Z)\s+(?P<level>\w+)\s+(?P<message>.*)'
      - timestamp:
          source: timestamp
          format: RFC3339
      - labels:
          level:
          service: n8n
          executionId:
          workflowId:

  # Clixen Frontend logs - ALL DETAIL
  - job_name: clixen-frontend
    docker_sd_configs:
      - host: unix:///var/run/docker.sock
        refresh_interval: 5s
    relabel_configs:
      - source_labels: ['__meta_docker_container_name']
        regex: '.*(clixen|frontend).*'
        target_label: 'service'
        replacement: 'clixen-frontend'
      - source_labels: ['__meta_docker_container_name']
        regex: '.*(clixen|frontend).*'
        action: keep
    pipeline_stages:
      # Parse Next.js and Node.js log formats
      - json:
          expressions:
            timestamp: timestamp
            level: level
            message: message
            userId: userId
            requestId: requestId
            method: method
            url: url
            statusCode: statusCode
            duration: duration
      - regex:
          expression: '^(?P<timestamp>\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d{3}Z)\s+(?P<level>\w+)\s+(?P<message>.*)'
      - timestamp:
          source: timestamp
          format: RFC3339
      - labels:
          level:
          service: clixen-frontend
          userId:
          method:

  # System logs - Host level
  - job_name: system-logs
    static_configs:
      - targets:
          - localhost
        labels:
          job: system-logs
          __path__: /var/log/syslog
    pipeline_stages:
      - regex:
          expression: '^(?P<timestamp>\w+\s+\d+\s+\d+:\d+:\d+)\s+(?P<hostname>\S+)\s+(?P<service>\S+).*?:\s+(?P<message>.*)'
      - timestamp:
          source: timestamp
          format: 'Jan 02 15:04:05'
      - labels:
          hostname:
          service:

  # Docker daemon logs
  - job_name: docker-daemon
    static_configs:
      - targets:
          - localhost
        labels:
          job: docker-daemon
          __path__: /var/log/docker.log
    pipeline_stages:
      - json:
          expressions:
            timestamp: time
            level: level
            message: msg
      - timestamp:
          source: timestamp
          format: RFC3339
      - labels:
          level:

  # Application specific error logs
  - job_name: app-errors
    static_configs:
      - targets:
          - localhost
        labels:
          job: app-errors
          __path__: /var/log/*.err
    pipeline_stages:
      - regex:
          expression: '^(?P<timestamp>\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d{3}Z)\s+(?P<level>ERROR)\s+(?P<message>.*)'
      - timestamp:
          source: timestamp
          format: RFC3339
      - labels:
          level: ERROR

  # Custom application logs (if mounted)
  - job_name: custom-app-logs
    file_sd_configs:
      - files:
          - /var/log/apps/*.log
        refresh_interval: 10s
    pipeline_stages:
      - json:
          expressions:
            timestamp: timestamp
            level: level
            message: message
            component: component
            trace_id: trace_id
      - timestamp:
          source: timestamp
          format: RFC3339
      - labels:
          level:
          component:
          trace_id:

  # Telegram bot specific logs (if identifiable)
  - job_name: telegram-bot
    docker_sd_configs:
      - host: unix:///var/run/docker.sock
        refresh_interval: 5s
    relabel_configs:
      - source_labels: ['__meta_docker_container_name']
        regex: '.*(telegram|bot).*'
        target_label: 'service'
        replacement: 'telegram-bot'
      - source_labels: ['__meta_docker_container_name']
        regex: '.*(telegram|bot).*'
        action: keep
    pipeline_stages:
      - json:
          expressions:
            timestamp: timestamp
            level: level
            message: message
            chat_id: chat_id
            user_id: user_id
            message_id: message_id
            command: command
      - timestamp:
          source: timestamp
          format: RFC3339
      - labels:
          level:
          service: telegram-bot
          chat_id:
          user_id:
          command:

  # Database logs (Supabase/PostgreSQL if accessible)
  - job_name: database-logs
    static_configs:
      - targets:
          - localhost
        labels:
          job: database-logs
          __path__: /var/log/postgresql/*.log
    pipeline_stages:
      - regex:
          expression: '^(?P<timestamp>\d{4}-\d{2}-\d{2}\s+\d{2}:\d{2}:\d{2}\.\d{3}\s+\w+)\s+\[(?P<pid>\d+)\]\s+(?P<level>\w+):\s+(?P<message>.*)'
      - timestamp:
          source: timestamp
          format: '2006-01-02 15:04:05.000 MST'
      - labels:
          level:
          pid: