generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL_UNPOOLED")
}

model Profile {
  id                   String     @id @default(cuid())
  neonAuthUserId       String     @unique @map("neon_auth_user_id")
  email                String     @unique
  displayName          String?    @map("display_name")
  telegramChatId       String?    @unique @map("telegram_chat_id")
  telegramUsername     String?    @map("telegram_username")
  telegramFirstName    String?    @map("telegram_first_name")
  telegramLastName     String?    @map("telegram_last_name")
  telegramLinkedAt     DateTime?  @map("telegram_linked_at")
  tier                 Tier       @default(FREE)
  trialStartedAt       DateTime   @default(now()) @map("trial_started_at")
  trialExpiresAt       DateTime   @default(dbgenerated("(now() + '7 days'::interval)")) @map("trial_expires_at")
  trialActive          Boolean    @default(true) @map("trial_active")
  quotaUsed            Int        @default(0) @map("quota_used")
  quotaLimit           Int        @default(50) @map("quota_limit")
  stripeCustomerId     String?    @unique @map("stripe_customer_id")
  stripeSubscriptionId String?    @map("stripe_subscription_id")
  userMetadata         Json       @default("{}") @map("user_metadata")
  lastActivityAt       DateTime   @default(now()) @map("last_activity_at")
  createdAt            DateTime   @default(now()) @map("created_at")
  updatedAt            DateTime   @updatedAt @map("updated_at")
  customUserData       Json       @default("{}") @map("custom_user_data")
  oauthProviders       Json       @default("{}") @map("oauth_providers")
  permissions          Json       @default("{}") @map("permissions")
  role                 TeamRole   @default(MEMBER)
  teamId               String?    @map("team_id")
  apiKeys              ApiKey[]
  team                 Team?      @relation(fields: [teamId], references: [id])
  usageLogs            UsageLog[]

  @@index([telegramChatId], map: "idx_telegram_chat_id")
  @@index([tier, trialExpiresAt], map: "idx_tier_trial_expires")
  @@index([lastActivityAt], map: "idx_last_activity")
  @@index([email], map: "idx_email")
  @@index([teamId], map: "idx_team_id")
  @@map("profiles")
}

model UsageLog {
  id                BigInt   @id @default(autoincrement())
  profileId         String   @map("profile_id")
  neonAuthUserId    String   @map("neon_auth_user_id")
  telegramChatId    String?  @map("telegram_chat_id")
  telegramMessageId BigInt?  @map("telegram_message_id")
  action            String
  workflowType      String?  @map("workflow_type")
  success           Boolean  @default(true)
  errorMessage      String?  @map("error_message")
  processingTimeMs  Int?     @map("processing_time_ms")
  createdAt         DateTime @default(now()) @map("created_at")
  profile           Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@index([profileId], map: "idx_profile_id")
  @@index([neonAuthUserId], map: "idx_neon_auth_user_id")
  @@index([createdAt], map: "idx_created_at")
  @@index([action, createdAt], map: "idx_action_date")
  @@index([telegramChatId, createdAt], map: "idx_telegram_date")
  @@index([success, createdAt], map: "idx_success_date")
  @@map("usage_logs")
}

model TelegramTempUser {
  id                 BigInt   @id @default(autoincrement())
  telegramChatId     String   @unique @map("telegram_chat_id")
  telegramUsername   String?  @map("telegram_username")
  telegramFirstName  String?  @map("telegram_first_name")
  telegramLastName   String?  @map("telegram_last_name")
  interactionCount   Int      @default(1) @map("interaction_count")
  firstInteractionAt DateTime @default(now()) @map("first_interaction_at")
  lastInteractionAt  DateTime @default(now()) @map("last_interaction_at")
  context            Json     @default("{}")

  @@index([lastInteractionAt], map: "idx_temp_last_interaction")
  @@map("telegram_temp_users")
}

model Team {
  id                   String    @id @default(cuid())
  name                 String
  slug                 String    @unique
  ownerId              String    @map("owner_id")
  teamTier             TeamTier  @default(TEAM_FREE) @map("team_tier")
  teamQuotaLimit       Int       @default(200) @map("team_quota_limit")
  teamQuotaUsed        Int       @default(0) @map("team_quota_used")
  stripeTeamCustomerId String?   @unique @map("stripe_team_customer_id")
  stripeTeamSubId      String?   @map("stripe_team_subscription_id")
  teamMetadata         Json      @default("{}") @map("team_metadata")
  createdAt            DateTime  @default(now()) @map("created_at")
  updatedAt            DateTime  @updatedAt @map("updated_at")
  apiKeys              ApiKey[]
  members              Profile[]

  @@index([slug], map: "idx_team_slug")
  @@index([ownerId], map: "idx_team_owner")
  @@map("teams")
}

model ApiKey {
  id          String    @id @default(cuid())
  profileId   String    @map("profile_id")
  teamId      String?   @map("team_id")
  keyHash     String    @unique @map("key_hash")
  keyPrefix   String    @map("key_prefix")
  name        String
  permissions Json      @default("{}") @map("permissions")
  scopes      String[]  @default([])
  lastUsedAt  DateTime? @map("last_used_at")
  usageCount  Int       @default(0) @map("usage_count")
  active      Boolean   @default(true)
  expiresAt   DateTime? @map("expires_at")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  profile     Profile   @relation(fields: [profileId], references: [id], onDelete: Cascade)
  team        Team?     @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@index([profileId], map: "idx_api_key_profile")
  @@index([teamId], map: "idx_api_key_team")
  @@index([keyPrefix], map: "idx_api_key_prefix")
  @@map("api_keys")
}

enum Tier {
  FREE    @map("free")
  STARTER @map("starter")
  PRO     @map("pro")
}

enum TeamTier {
  TEAM_FREE    @map("team_free")
  TEAM_STARTER @map("team_starter")
  TEAM_PRO     @map("team_pro")
  ENTERPRISE   @map("enterprise")
}

enum TeamRole {
  OWNER  @map("owner")
  ADMIN  @map("admin")
  MEMBER @map("member")
  VIEWER @map("viewer")
}
